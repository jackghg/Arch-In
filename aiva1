#!/bin/bash
# Create the partitions before.
# you should mount the scripts disk under /ai
printf "\n\n ARCH-IN vars - part1\nRead the guide and carefully edit the variables in this file.\nBackup your data before!\n"
exit 1 #comment this line when it's all right
#
# --- Fill The Variables ---
aiLTS=1 # 1 = use the LTS Kernel (more stable, less new)
aiAUTOLOGIN=0 # auto login the first user
aiPRINT=1 # print support, your printer drivers could be needed
aiBT=0 # blutooth support
aiSHARES=1 # 1 = auto start the local network file and printers sharing services (samba)
# - Samba will be configured anyway, you can edit samba.conf and user manually
aiCF=n # launch cfdisk
aiUSESWAP=1 # install using a swap partition
aiSWAPP="sda2" # swap partition
aiMAINP="sda3" # linux install partition
aiUEFI=0 # 1 = uefi boot, 0 = legacy boot
aiKEYLANG="en" # keyboard language
aiDISK="sda" # disk where to instal the bootloader
aiBOOTN=1 # boot partition number
aiBOOTP="sda1" # boot partition
aiPCNAME="PC" # a computer name
aiUSER="jack" # first user user name
aiLOCALE="en_US.UTF-8 UTF-8"  # locale and charset
aiLOCALEL="LANG=en_US.UTF-8"  # LANG var locale and charset
aiGOT=1 # 1 = use the city to find the timezone, 0 = use the GMT offset (daylight saving time)
aiREGION="Europe" # timezone Region, not needed if you selected GMT offset
aiCITY="London" # timezone City, not needed if you selected  GMT offset
aiGMT="0" # timezone GMT offset, not needed if you selected the region/city
aiUPDATE=1 # Simple terminal based autoupdate, 0 to 2, runs once a week
# - 0: none
# - 1: visible terminal + confirm
# - 2: invisible
aiVDRIVERS=0 # Video card drivers, 0 to 5
# - 0: No drivers
# - 1: Intel official open source drivers
# - 2: AMD official open source drivers for new cards
# - 3: AMD open source drivers
# - 4: Nvidia official proprietary drivers
# - 5: Nvidia open source drivers
aiDE=1 # Desktop Environment, 0 to 2
# - 0: No DE
# - 1: XFCE
# - 2: LXDE
aiLOL="" # Libre Office language pack package name locale
# - you can enable or disable or edit the updArch.timer and updArchS.timer
# - you can edit the code within updArch.service and updArchS.service
# - in the folders /etc/systemd/user and /etc/systemd/system
# ---
# Copy the variables to aiva2 !
# --- Initial Settings ---
echo 'Testing connection...'
curl -Is http://www.google.com
if [ $? -gt 0 ]; then
read -p "No internet connection detected! Continue ? (y/n): " ireply
if [ "$ireply" != "y" ]; then
exit
fi
else
echo 'Internet is OK'
fi
aiPATH="`dirname \"$0\"`"
aiPATH="`( cd \"$aiPATH\" && pwd )`"
#aiPATH="/ai" # fixed scripts path
loadkeys $aiKEYLANG
dhcpcd
sleep 3s
timedatectl set-ntp true
if [ "$aiCF" = "y" ]; then
cfdisk
fi
# - Boot flag
if [ $aiUEFI -eq 1 ]; then
parted /dev/$aiDISK set $aiBOOTN esp on
else
parted /dev/$aiDISK set $aiBOOTN bios_grub on
fi
# - Format
mkfs.ext4 /dev/$aiMAINP
if [ $aiUSESWAP -eq 1 ]; then
mkswap /dev/$aiSWAPP
swapon /dev/$aiSWAPP
fi
mkfs.fat -F 32 /dev/$aiBOOTP
# - Mount
mount /dev/$aiMAINP /mnt
# - you can add more mount points. custom mount points will likely not work, edit fstab later
#
# --- Files Copy ---
if [ $aiLTS -eq 1 ]; then
pacstrap /mnt base linux-lts linux-lts-headers linux-firmware base-devel grub efibootmgr os-prober pacman-contrib dhcpcd nano vi
else
pacstrap /mnt base linux linux-headers linux-firmware base-devel grub efibootmgr os-prober pacman-contrib dhcpcd nano vi
fi
genfstab -U /mnt >> /mnt/etc/fstab
#
# --- Chroot ---
cp ${aiPATH}/aivachr /mnt/root
cp ${aiPATH}/aiva2 /mnt/root
arch-chroot /mnt ./root/aivachr
printf "\n\nPart 1 complete !\nRemove the Arch iso, restart, login as root, connect and execute the second part.\n"
read -p "Reboot ? (y/n) " ireply
if [ "$ireply" = "y" ]; then
reboot
fi
exit 0
